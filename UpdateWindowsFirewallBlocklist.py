'''
I'll be running this script once a day from the TaskScheduler. Botnet IPs taken from the Feodo tracker list compiled by Abuse.ch
My script is a modified version of a proof-of-concept script by the PCSecurity YouTube channel. 
My main additions are checking that the entries are properly formatted IP addresses (to prevent remote code execution)
and compiling the IP addresses into just a few entries within the Firewall, instead of creating a new rule for each IP address.
'''

import requests, csv, subprocess, ipaddress
DETACHED_PROCESS = 0x00000008

'''source=Abuse CH'''
response = requests.get("https://feodotracker.abuse.ch/downloads/ipblocklist.csv").text

''' creationflags added to prevent Powershell window brief pop-ups'''
def runSubprocess(rule):
    subprocess.run(["Powershell", "-WindowStyle", "Hidden", "-Command", rule], creationflags=DETACHED_PROCESS)

'''
Helper method to add rules to Windows Firewall. The 1st and 3rd commands create a placeholder entry, 
the 2nd and 4th commands populate those entries with a list of IP addresses to be blocked.
(One cannot create a Windows Firewall rule with a list of IPs using netsh)
'''
def executeNewRules(list_count, ip_row, list_of_ips):
    rule="netsh advfirewall firewall add rule name='BadIPOut"+str(list_count)+"' Dir=Out Action=Block RemoteIP="+ip_row
    runSubprocess(rule)
    rule="netsh advfirewall firewall set rule name='BadIPOut"+str(list_count)+"' new RemoteIP="+list_of_ips
    runSubprocess(rule)
    rule="netsh advfirewall firewall add rule name='BadIPIn"+str(list_count)+"' Dir=In Action=Block RemoteIP="+ip_row
    runSubprocess(rule)
    rule="netsh advfirewall firewall set rule name='BadIPIn"+str(list_count)+"' new RemoteIP="+list_of_ips
    runSubprocess(rule)

''' remove any previously existing rules in Windows Firewall generated by this script'''
for i in range(0,100):
    test_rule = "netsh advfirewall firewall show rule name='BadIPOut"+str(i)+"' | findstr 'no rules'"
    test = (subprocess.run(["Powershell", "-WindowStyle", "Hidden", "-Command", test_rule], capture_output=True, text=True, creationflags=DETACHED_PROCESS).stdout)
    if (test == ''):    
        rule = "netsh advfirewall firewall delete rule name='BadIPOut"+str(i)+"'"
        runSubprocess(rule)
        rule = "netsh advfirewall firewall delete rule name='BadIPIn"+str(i)+"'"
        runSubprocess(rule)
    else:
        break

list_of_ips = ""
counter = 0
list_count = 0

mycsv = csv.reader(filter(lambda x: not x.startswith("#"), response.splitlines()))

'''
Main driver. Checks each row for properly formatted IP addresses, then adds to list of IPs.
Breaks list into groups of 400, as there is a limit to the number of IP addresses that can be
added to a single rule in Windows Firewall.
'''
for row in mycsv:
    ip_row = row[1]
    try:
        ip = ipaddress.IPv4Address(ip_row)
    except ipaddress.AddressValueError:
        print("Skipping invalid ip",ip_row)
        continue
    except:
        print("unexpected error for:",ip_row)
        continue
    if (counter == 0):
        counter+=1
        list_of_ips = ip_row
        print("Added Rule to block:",ip_row)
    elif (counter < 400):
        counter+=1
        list_of_ips += ","+ip_row
        print("Added Rule to block:",ip_row)
    else:
        counter=0
        executeNewRules(list_count, ip_row, list_of_ips)
        list_count+=1
        list_of_ips = ""

'''Add any remaining IPs to new rules.'''
if counter > 0:
    executeNewRules(list_count, ip_row, list_of_ips)

